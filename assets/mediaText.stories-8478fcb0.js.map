{"version":3,"file":"mediaText.stories-8478fcb0.js","sources":["../../src/components/mediaText-simple/mediaText.interface.ts","../../src/components/mediaText-simple/MediaText.tsx"],"sourcesContent":["import { ReactNode } from 'react';\n\nexport enum MediaTextVariant {\n  Zps = 'ZPS',\n  Cat = 'CAT',\n}\n\nexport interface BaseMediaProps {\n  variant?: MediaTextVariant;\n  imageAlignment?: 'left' | 'right';\n}\n\nexport interface MediaTextContentProps {\n  headline?: string;\n  tagline?: string;\n  description?: string;\n  children?: ReactNode;\n}\nexport interface MediaTextBodyProps {\n  children: ReactNode;\n}\n\nexport interface MediaTextImageProps {\n  src: string;\n  alt: string;\n  aspectRatio?: '4:3' | '3:4';\n  orientation?: 'landscape' | 'portrait';\n  imageAlignment?: 'left' | 'right';\n  variant?: MediaTextVariant;\n}\n\nexport interface MediaTextTaglineProps {\n  children: ReactNode;\n}\n\nexport interface MediaTextBodyProps {\n  children: ReactNode;\n}\n\nexport interface MediaTextHeadlineProps {\n  children: ReactNode;\n}\n\nexport interface MediaTextDescriptionProps {\n  children: ReactNode;\n}\n\nexport interface MediaTextButtonProps {\n  children?: ReactNode;\n  labelPrimary: string;\n  labelSecondary: string;\n  onClickPrimary?: () => void;\n  onClickSecondary?: () => void;\n}\n","import { Spacing } from '@zepdev/design-system-component-library-react';\nimport { cva } from 'class-variance-authority';\nimport clsx from 'clsx';\nimport { createContext, useContext } from 'react';\nimport { twMerge } from 'tailwind-merge';\nimport { Button } from '../zps-button/ZpsButton';\nimport { ZpsButtonVariant } from '../zps-button/zps-button.interface';\nimport {\n  BaseMediaProps,\n  MediaTextBodyProps,\n  MediaTextButtonProps,\n  MediaTextContentProps,\n  MediaTextImageProps,\n  MediaTextVariant,\n} from './mediaText.interface';\n\nconst MediaTextContext = createContext({\n  imageAlignment: 'left',\n  variant: MediaTextVariant.Zps,\n  headline: '',\n  tagline: '',\n  description: '',\n});\nexport const useMediaTextContext = () => useContext(MediaTextContext);\n\nconst MediaText = ({\n  imageAlignment = 'left',\n  children,\n  variant = MediaTextVariant.Zps,\n  headline = '',\n  tagline = '',\n  description = '',\n}: MediaTextContentProps & BaseMediaProps) => {\n  return (\n    <MediaTextContext.Provider value={{ imageAlignment, variant, headline, tagline, description }}>\n      <div className=\"zep-grid-items zep-items-center zep-justify-center zep-min-screen\">\n        <div\n          className={clsx(\n            'zep-container',\n            'zep-mx-auto',\n            'zep-relative',\n            'zep-grid',\n            'zep-grid-cols-1',\n            'md:zep-gap-1.5',\n            'lg:zep-gap-2',\n            'md:zep-grid-cols-16',\n          )}\n          data-testid=\"zep-mediaText-simple\"\n        >\n          {children}\n        </div>\n      </div>\n    </MediaTextContext.Provider>\n  );\n};\n\nconst MediaTextImage = ({ src, alt, aspectRatio = '4:3' }: MediaTextImageProps) => {\n  const { imageAlignment } = useMediaTextContext();\n  const imageAspectRation = aspectRatio === '4:3' ? 'zep-pb-[calc(3_*_100%_/_4)]' : 'zep-pb-[calc(4_*_100%_/_3)]';\n  const alignmentClass = imageAlignment === 'left' ? 'md:zep-order-1' : '';\n  const columnClass =\n    imageAlignment === 'left'\n      ? 'md:zep-col-start-2 md:zep-col-end-9 xl:zep-col-start-3 xl:zep-col-end-10'\n      : 'md:zep-col-start-9 md:zep-col-end-16 xl:zep-col-start-8 xl:zep-col-end-15';\n  return (\n    <div\n      data-testid=\"zep-mediaText-image\"\n      className={clsx(\n        'zep-col-start-5',\n        'zep-col-end-13',\n        'zep-justify-center',\n        'zep-row-start-1',\n        'zep-row-end-1',\n        alignmentClass,\n        columnClass,\n      )}\n    >\n      <div className={clsx('zep-relative', imageAspectRation)}>\n        <img\n          alt={alt}\n          src={src}\n          className={clsx('zep-w-full zep-h-full zep-object-cover md:zep-w-full md:zep-h-full md:zep-max-w-full')}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst MediaTextBody = ({ children }: MediaTextBodyProps) => {\n  const { imageAlignment, variant } = useMediaTextContext();\n\n  const alignmentClass = imageAlignment === 'left' ? '' : 'md:zep-order-1';\n  const columnClass =\n    imageAlignment === 'left'\n      ? 'zep-col-start-6 zep-col-end-12 md:zep-col-start-8 md:zep-col-end-16 xl:zep-col-start-9 xl:zep-col-end-15'\n      : 'zep-col-start-5 zep-col-end-13  md:zep-col-start-2 md:zep-col-end-10 xl:zep-col-start-3 xl:zep-col-end-9';\n\n  const mediaTextVariants = {\n    [MediaTextVariant.Zps]: ['zep-bg-gradient-to-r zep-from-[rgb(32,27,52)] zep-to-[rgb(32,23,94)]'],\n    [MediaTextVariant.Cat]: ['zep-bg-neutral-dark-default'],\n  };\n  const mediaTextCard = cva(\n    [\n      ` \n        zep-mt-[63%]\n        md:zep-w-auto\n        zep-mx-auto\n        md:zep-mt-[60px]\n        xl:zep-mt-[120px]\n        zep-h-[max-content]\n        zep-row-start-1\n        zep-row-end-1\n        zep-z-10\n        zep-p-1\n        sm:zep-p-2\n        md:zep-p-2\n        lg:zep-p-5\n        xl:zep-p-5\n        zep-max-w-fit\n        md:zep-max-w-[499px]\n        lg:zep-max-w-[700px]\n        ${alignmentClass},\n        ${columnClass}`,\n    ],\n    {\n      variants: {\n        variant: mediaTextVariants,\n      },\n      defaultVariants: {\n        variant: MediaTextVariant.Zps,\n      },\n    },\n  );\n  return (\n    <div className={twMerge(mediaTextCard({ variant }))} data-testid=\"zep-mediaText-body\">\n      <div>{children}</div>\n    </div>\n  );\n};\n\nconst MediaTextTagline = () => {\n  const { tagline, variant } = useMediaTextContext();\n\n  const mediaTextTaglineVariants = {\n    [MediaTextVariant.Zps]: ['zep-text-typography-brand-steel'],\n    [MediaTextVariant.Cat]: ['zep-text-typography-light-70 zep-opacity-70'],\n  };\n\n  const mediaTextTaglines = cva(\n    [\n      `zep-typography-taglineMD\n      zep-mb-0.5\n      `,\n    ],\n    {\n      variants: {\n        variant: mediaTextTaglineVariants,\n      },\n      defaultVariants: {\n        variant: MediaTextVariant.Zps,\n      },\n    },\n  );\n\n  return (\n    <p data-testid=\"zep-MediaText-tagline\" className={twMerge(mediaTextTaglines({ variant }), 'zep-break-words')}>\n      {tagline}\n    </p>\n  );\n};\n\nconst MediaTextHeadline = () => {\n  const { headline } = useMediaTextContext();\n  return (\n    <h4\n      data-testid=\"zep-MediaText-headline\"\n      className={clsx(\n        'zep-text-typography-light-100',\n        'zep-typography-headlineMD-fluid-cqi',\n        'after:zep-text-[0.23em]',\n        'zep-mb-1.5',\n        'xl:zep-mb-2',\n        'zep-text-left',\n        'zep-break-words',\n      )}\n    >\n      {headline}\n    </h4>\n  );\n};\n\nconst MediaTextDescription = () => {\n  const { description } = useMediaTextContext();\n  return (\n    <p\n      data-testid=\"zep-MediaText-description\"\n      className=\"zep-text-typography-light-100 zep-typography-bodyText zep-mb-1.5 xl:zep-mb-2 zep-break-words\"\n    >\n      {description}\n    </p>\n  );\n};\n\nconst MediaTextButtons = ({ labelPrimary, labelSecondary, onClickPrimary, onClickSecondary }: MediaTextButtonProps) => {\n  return (\n    <div className=\"zep-block\" data-testid=\"zep-mediatext-buttons\">\n      <Spacing\n        gap=\"1.5\"\n        className={clsx('max-md:zep-flex', 'md:zep-flex-row zep-gap-1.5 md:zep-gap-2 lg:zep-gap-1.5')}\n        direction=\"column\"\n      >\n        <Button onClick={onClickPrimary} label={labelPrimary} variant={ZpsButtonVariant.Primary} />\n        <Button label={labelSecondary} onClick={onClickSecondary} variant={ZpsButtonVariant.Secondary} />\n      </Spacing>\n    </div>\n  );\n};\n\nMediaText.Image = MediaTextImage;\nMediaText.Body = MediaTextBody;\nMediaText.Tagline = MediaTextTagline;\nMediaText.Headline = MediaTextHeadline;\nMediaText.Description = MediaTextDescription;\nMediaText.Button = MediaTextButtons;\n\nexport { MediaText };\n"],"names":["MediaTextVariant","MediaTextContext","createContext","useMediaTextContext","useContext","MediaText","imageAlignment","children","variant","headline","tagline","description","jsxDEV","clsx","this","MediaTextImage","src","alt","aspectRatio","imageAspectRation","alignmentClass","columnClass","MediaTextBody","mediaTextVariants","mediaTextCard","cva","twMerge","MediaTextTagline","mediaTextTaglineVariants","mediaTextTaglines","MediaTextHeadline","MediaTextDescription","MediaTextButtons","labelPrimary","labelSecondary","onClickPrimary","onClickSecondary","Spacing","Button","ZpsButtonVariant"],"mappings":"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"}