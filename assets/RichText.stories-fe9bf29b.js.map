{"version":3,"file":"RichText.stories-fe9bf29b.js","sources":["../../node_modules/@zepdev/design-system-component-library-react/dist/index.es18.js","../../src/components/richText/RichText.tsx"],"sourcesContent":["import { jsx as o } from \"react/jsx-runtime\";\nimport { clsx as r } from \"./index.es29.js\";\nimport { createContext as c, useContext as s } from \"react\";\nconst n = c({ type: \"bullet\" }), i = ({ type: t = \"bullet\", children: e, className: l }) => {\n  const p = t === \"bullet\" ? \"ul\" : \"ol\";\n  return /* @__PURE__ */ o(n.Provider, { value: { type: t }, children: /* @__PURE__ */ o(\n    p,\n    {\n      className: r(\n        \"zep-typography-bodyText\",\n        \"zep-list-none\",\n        \"[&_ul]:zep-pl-2\",\n        \"[&_ol]:zep-pl-2\",\n        \"[counter-reset:section]\",\n        l\n      ),\n      children: e\n    }\n  ) });\n}, b = ({ children: t }) => {\n  const { type: e } = s(n);\n  return /* @__PURE__ */ o(\n    \"li\",\n    {\n      className: r(\n        \"zep-relative\",\n        \"zep-flex\",\n        \"zep-items-baseline\",\n        \"zep-py-0.5\",\n        \"[counter-increment:section]\",\n        \"before:zep-w-1.5\",\n        \"before:zep-h-1.5\",\n        \"before:zep-mr-0.75\",\n        \"before:zep-text-center\",\n        \"before:zep-shrink-0\",\n        { 'before:[content:\"â€¢\"]': e === \"bullet\" },\n        { \"before:[content:counter(section,lower-alpha)]\": e === \"alphabetical\" },\n        { \"before:[content:counter(section)]\": e === \"numeric\" }\n      ),\n      children: t\n    }\n  );\n};\ni.Item = b;\nexport {\n  i as List\n};\n//# sourceMappingURL=index.es18.js.map\n","import { List } from '@zepdev/design-system-component-library-react';\nimport React from 'react';\nimport { clsx } from 'clsx';\nimport { Link, LinkMode, LinkTarget } from '@zepdev/design-system-component-library-react';\nimport { Block, EntityMap, RichTextProps } from './richText.interface';\n\nconst Header: React.FC<{ level: 'header-three' | 'header-four'; className?: string; children: React.ReactNode }> = ({\n  level,\n  children,\n}) => {\n  const headerClass =\n    level === 'header-three'\n      ? 'zep-typography-headlineSM-fluid-cqi zep-mb-1'\n      : 'zep-typography-headlineMD-fluid-cqi zep-mb-2';\n  return level === 'header-three' ? (\n    <h3 className={clsx(headerClass)}>{children}</h3>\n  ) : (\n    <h4 className={clsx(headerClass)}>{children}</h4>\n  );\n};\n\n// Paragraph Component\nconst Paragraph: React.FC<{ children: React.ReactNode; className?: string }> = ({ children }) => (\n  <p className=\"zep-mb-2\">{children}</p>\n);\n\n// List Component\nconst ListComponent: React.FC<{ ordered: boolean; className?: string; items: string[] }> = ({ ordered, items }) => (\n  <List className=\"zep-mb-2\" type={ordered ? 'numeric' : 'bullet'}>\n    {items.map((item, idx) => (\n      <List.Item key={idx}>{item}</List.Item>\n    ))}\n  </List>\n);\n\nconst RichText = ({ content, children, textColor }: RichTextProps) => {\n  const containerClass =\n    textColor === 'white'\n      ? '!zep-text-typography-light-100'\n      : textColor === 'black'\n      ? '!zep-text-typography-dark-100'\n      : 'zep-text-indigo-500';\n  const renderBlock = (block: Block, index: number, entityMap: EntityMap) => {\n    const { type, text, inlineStyleRanges = [], entityRanges = [], items = [], ordered } = block;\n\n    const getSegments = (text: string, ranges: any[], entityMap?: EntityMap, type: 'style' | 'entity' = 'style') => {\n      let segments: Array<{ text: string; style?: string | null; url?: string | null }> = [];\n      let lastIndex = 0;\n\n      ranges.forEach(({ offset, length, style, key }) => {\n        if (offset > lastIndex) {\n          segments.push({ text: text.slice(lastIndex, offset), style: null, url: null });\n        }\n        const segmentText = text.slice(offset, offset + length);\n        const segmentStyle = type === 'style' ? style || null : null;\n        const segmentUrl = type === 'entity' && key !== undefined && entityMap ? entityMap[key].data.url : null;\n\n        segments.push({ text: segmentText, style: segmentStyle, url: segmentUrl });\n        lastIndex = offset + length;\n      });\n\n      if (lastIndex < text.length) {\n        segments.push({ text: text.slice(lastIndex), style: null, url: null });\n      }\n\n      return segments;\n    };\n\n    const entitySegments = getSegments(text || '', entityRanges, entityMap, 'entity');\n    const finalSegments = entitySegments.flatMap((segment, entityIndex) => {\n      if (segment.url) {\n        return (\n          <>\n            <Link\n              key={entityIndex}\n              href={segment.url}\n              as=\"span\"\n              hasIcon={false}\n              label={segment.text}\n              mode={LinkMode.Inline}\n              target={LinkTarget.Blank}\n            />\n          </>\n        );\n      }\n      const styleSegments = getSegments(segment.text, inlineStyleRanges, undefined, 'style');\n      return styleSegments.map((styleSegment, styleIndex) => {\n        if (styleSegment.style === 'BOLD') {\n          return (\n            <span className=\"zep-typography-bodyStrong\" key={entityIndex + '-' + styleIndex}>\n              {styleSegment.text}\n            </span>\n          );\n        } else if (styleSegment.style === 'ITALIC') {\n          return (\n            <span className=\"zep-italic\" key={entityIndex + '-' + styleIndex}>\n              {styleSegment.text}\n            </span>\n          );\n        }\n        return <span key={entityIndex + '-' + styleIndex}>{styleSegment.text}</span>;\n      });\n    });\n\n    // resove unique key issue\n    const contentElement = (\n      <span className={clsx(containerClass)}>\n        {finalSegments.map((segment, segmentIndex) => (\n          <span key={`${index}-${segmentIndex}`}>{segment}</span>\n        ))}\n      </span>\n    );\n\n    switch (type) {\n      case 'header-three':\n      case 'header-four':\n        return (\n          <Header className={clsx(containerClass, 'zep-font-500')} level={type} key={index}>\n            {contentElement}\n          </Header>\n        );\n      case 'unstyled':\n        return (\n          <Paragraph className={containerClass} key={index}>\n            {contentElement}\n          </Paragraph>\n        );\n      case 'list':\n        return <ListComponent className={containerClass} ordered={!!ordered} items={items} key={index} />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div\n      className={clsx(containerClass, 'zep-container', 'md:zep-w-[944px]', 'zep-mx-auto')}\n      data-testid=\"zep-richtext\"\n    >\n      {content.blocks.map((block, index) => renderBlock(block, index, content.entityMap))}\n      {content.images.map((image, index) => (\n        <div key={index}>\n          <img className=\"zep-h-auto zep-max-w-full zep-mb-1\" src={image.src} alt={image.alt} />\n        </div>\n      ))}\n      {children}\n    </div>\n  );\n};\n\nexport { RichText };\n"],"names":["n","c","i","e","l","p","o","r","b","s","Header","level","children","headerClass","jsxDEV","clsx","this","Paragraph","ListComponent","ordered","items","List","item","idx","RichText","content","textColor","containerClass","renderBlock","block","index","entityMap","type","text","inlineStyleRanges","entityRanges","getSegments","text2","ranges","entityMap2","type2","segments","lastIndex","offset","length","style","key","segmentText","segmentStyle","segmentUrl","finalSegments","segment","entityIndex","Fragment","Link","LinkMode","LinkTarget","styleSegment","styleIndex","contentElement","segmentIndex","image"],"mappings":"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","x_google_ignoreList":[0]}